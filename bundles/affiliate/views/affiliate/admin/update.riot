<affiliate-admin-update-page>
  <div class="page page-admin">

    <admin-header title={ `${props.item && props.item.id ? 'Update' : 'Create '} Affiliate` }>
      <div slot="right">
        <a href="/admin/affiliate" class="btn btn-lg btn-primary mr-2">
          Back
        </a>
        <button class={ classes({ 'btn btn-lg' : true, 'btn-primary' : preview, 'btn-success' : !props.preview }) } onclick={ onPreview }>
          { props.preview ? 'Alter Form' : 'Finish Altering' }
        </button>
      </div>
    </admin-header>

    <div class="container-fluid">
      <div class="row row-eq-height">
      
        <div class="col-xl-3 col-lg-4" if={ user }>
          <div class="card">
            <div class="card-body">
              <div class="text-center">
                <media-img if={ user.avatar } image={ Array.isArray(user.avatar) ? user.avatar[0] : user.avatar } label="1x-sq" classes="w-50 img-fluid rounded-circle img-avatar mb-4" />
                <h2>
                  { user.username || user.email }
                </h2>
                <p class="text-muted m-0">
                  { props.item.name } | Member for: { getDate(user.created_at) }
                </p>
              </div>
            </div>
          </div>
        </div>
        
        <div class="col">
          <div class="row mb-4" if={ user }>

            <!-- earnings this month -->
            <div class="col-3">
              <div class="card card-stat text-center">
                <div class="card-body">
                  <h3 class="text-uppercase">
                    Earnings
                  </h3>
                  <p class="text-uppercase">
                    This Month
                  </p>
                  <h3 class="text-uppercase text-primary">
                    <money amount={ get('credits.all', '0') } /> / { props.totals.month.toLocaleString() }
                  </h3>
                </div>
              </div>
            </div>
            <!-- / earnings this month -->

            <!-- earnings all time -->
            <div class="col-3">
              <div class="card card-stat text-center">
                <div class="card-body">
                  <h3 class="text-uppercase">
                    Earnings
                  </h3>
                  <p class="text-uppercase">
                    All Time
                  </p>
                  <h3 class="text-uppercase text-primary">
                    <money amount={ get('credits.all', '0') } /> / { props.totals.all.toLocaleString() }
                  </h3>
                </div>
              </div>
            </div>
            <!-- / earnings all time -->

            <!-- referrals this month -->
            <div class="col-3">
              <div class="card card-stat text-center">
                <div class="card-body">
                  <h3 class="text-uppercase">
                    Total
                  </h3>
                  <p class="text-uppercase">
                    Total Paid
                  </p>
                  <h3 class="text-uppercase text-primary">
                    ${ get('orders', 0).toLocaleString() }
                  </h3>
                </div>
              </div>
            </div>
            <!-- / referrals this month -->

            <!-- referrals all time -->
            <div class="col-3">
              <div class="card card-stat text-center">
                <div class="card-body">
                  <h3 class="text-uppercase">
                    Balance
                  </h3>
                  <p class="text-uppercase">
                    withdrawable
                  </p>
                  <h3 class="text-uppercase text-primary">
                    ${ getBalance().toLocaleString() }
                  </h3>
                </div>
              </div>
            </div>
            <!-- / referrals all time -->

          </div>
          
          
          <div class="card">
            <div class="card-header">
              <ul class="nav nav-tabs card-header-tabs">
                <li class="nav-item">
                  <a class={ classes({ 'nav-link' : true, 'active' : tab === 'details' }) } href="#" onclick={ onDetails }>
                    Details
                  </a>
                </li>
                <li class="nav-item">
                  <a class={ classes({ 'nav-link' : true, 'active' : tab === 'rates', 'disabled' : !props.item.id }) } href="#" onclick={ props.item.id ? onRates : null }>
                    Rates
                  </a>
                </li>
                <li class="nav-item">
                  <a class={ classes({ 'nav-link' : true, 'active' : tab === 'credits', 'disabled' : !props.item.id }) } href="#" onclick={ props.item.id ? onCredits : null }>
                    Credits
                  </a>
                </li>
                <li class="nav-item">
                  <a class={ classes({ 'nav-link' : true, 'active' : tab === 'codes', 'disabled' : !props.item.id }) } href="#" onclick={ props.item.id ? onCodes : null }>
                    Codes
                  </a>
                </li>
              </ul>
            </div>
            
            <div class="card-body" show={ tab === 'details' }>
              <form-render action={ `/admin/affiliate/${props.item && props.item.id ? props.item.id + '/update' : 'create'}` } method="post" ref="form" form={ props.form } placement="edenjs.shop.affiliate" positions={ positions } preview={ preview } class="d-block mb-3" />
            </div>
            <div class="card-footer text-right" if={ tab === 'details' }>
              <button type="button" onclick={ onSubmit } class={ classes({ 'btn btn-success' : true, 'disabled' : loading() }) }>
                { loading() ? 'Submitting...' : 'Submit' }
              </button>
            </div>
            
            <form if={ tab === 'rates' } method="post" action={ `/admin/affiliate/${props.item.id}/update` }>
              <div class="card-body">
                <div each={ (type, i) in props.types } class="form-group">
                  <label for={ type.type }>
                    { type.type } Affiliate Rate
                  </label>
                  <div class="input-group">
                    <input class="form-control" type="number" value={ get(`item.rates.${type.type}.affiliate`, '') } name={ `rates[${type.type}][affiliate]` } />
                    <div class="input-group-append">
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                </div>
                <hr />
                <div each={ (type, i) in opts.types } class="form-group">
                  <label for={ type.type }>
                    { type.type } Discount Rate
                  </label>
                  <div class="input-group">
                    <input class="form-control" type="number" value={ get(`item.rates.${type.type}.discount`, '') } name={ `rates[${type.type}][discount]` } />
                    <div class="input-group-append">
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-footer text-right">
                <button type="submit" onclick={ onSubmitRates } class={ classes({ 'btn btn-success' : true, 'disabled' : loading() }) }>
                  { loading() ? 'Submitting...' : 'Submit' }
                </button>
              </div>
            </form>
            
            <div class="card-body" if={ tab === 'credits' }>
              <grid grid={ props.grid } table-class="table table-striped table-bordered" title="Affiliate Credits" />
            </div>
            
            <div if={ tab === 'codes' }>
              <div class="card-body">
                <div class="row row-eq-height">
                  <div class="col-4" each={ (code, i) in props.codes }>
                    <div class="card card-body">
                      <h2 class="m-0">
                        { code.code }
                      </h2>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-footer text-right">
                <button class="btn btn-success" onclick={ onAddCode }>
                  Add Code
                </button>
              </div>
            </div>
            
          </div>
        </div>
      </div>
    </div>
    
  </div>
  
  <form if={ props.item } method="post" action={ `/admin/affiliate/${props.item.id}/code` } class="modal fade" id="code-modal" ref="code-modal">
    <div class="modal-dialog">
      <div class="modal-content">

        <!-- Modal Header -->
        <div class="modal-header">
          <h4 class="modal-title">Add Code</h4>
          <button type="button" class="close" data-dismiss="modal">&times;</button>
        </div>

        <!-- Modal body -->
        <div class="modal-body">
          <div class="form-group">
            <label for="code">
              Code
            </label>
            <input class="form-control" type="text" name="code" />
          </div>
        </div>

        <!-- Modal footer -->
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
          <button type="submit" class="btn btn-success">Submit</button>
        </div>

      </div>
    </div>
  </form>

  <script>
    // import base
    import Base from '../../js/base';
    import uuid from 'uuid';
    import moment from 'moment';

    // export default
    export default class AffiliateAdminUpdatePage extends Base {

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // run super
        super.onBeforeMount(...args);

        // set type
        this.tab     = 'details';
        this.type    = this.props.item.type || 'raised';
        this.user    = (Array.isArray(this.props.item.user) ? this.props.item.user[0] : this.props.item.user);
        this.preview = true;
    
        // set placements
        this.positions = this.props.positions || this.props.fields.map((field) => {
          // return field
          return {
            'type'     : field.type,
            'uuid'     : uuid(),
            'name'     : field.name,
            'i18n'     : !!field.i18n,
            'label'    : field.label,
            'force'    : true,
            'multiple' : field.multiple,
            'children' : []
          };
        });
      }
    
      /**
       * on submit
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      async onSubmit (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // set loading
        this.loading('submit', true);
        
        // submit form
        await this.refs.form.submit();
        
        // set loading
        this.loading('submit', false);
      }
      
      /**
      * on add code
      *
      * @param  {Event} e
      */
      onAddCode (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // show modal
        jQuery(this.refs['code-modal']).modal('show');
      }
      
      /**
      * on preview
      *
      * @param  {Event} e
      *
      * @return {*}
      */
      onPreview (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // set loading
        this.preview = !this.preview;
        
        // update view
        this.update();
      }

      /**
      * on details tab
      *
      * @param  {Event} e
      */
      onDetails(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set tab
        this.tab = 'details';
        this.update();
      }

      /**
      * on rates tab
      *
      * @param  {Event} e
      */
      onRates(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set tab
        this.tab = 'rates';
        this.update();
      }

      /**
      * on credits tab
      *
      * @param  {Event} e
      */
      onCredits(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set tab
        this.tab = 'credits';
        this.update();
      }

      /**
      * on credits tab
      *
      * @param  {Event} e
      */
      onCodes(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set tab
        this.tab = 'codes';
        this.update();
      }

      /**
      * get category
      *
      * @return {Object}
      */
      affiliate () {
        // return category
        return props.item;
      }
      
      /**
      * gets date
      *
      * @param  {Date} date
      *
      * @return {String}
      */
      getDate(date) {
        // from now
        return moment(date).fromNow(true);
      }

      /**
      * get balance
      */
      getBalance() {
        // return balance
        return (this.user || {}).balance || 0;
      }
    }

  </script>
</affiliate-admin-update-page>
